#this script gets a count of the number of saved placements and get the ddg score of the system
import os,sys

#dictionary that contains atom atomic weights for molecular mass calculation
#To save time, this dictionary was generated by ChatGPT3.5 with the prompt:
#Please write me a python3 dictionary that contains all periodic table element chemical symbols as keys and their atomic weights as values
#Please rewrite the dictionary so that there are 10 elements per line
periodic_table = {
    "H": 1.008, "He": 4.0026, "Li": 6.94, "Be": 9.0122, "B": 10.81,
    "C": 12.011, "N": 14.007, "O": 15.999, "F": 18.998, "Ne": 20.180,
    "Na": 22.990, "Mg": 24.305, "Al": 26.982, "Si": 28.085, "P": 30.974,
    "S": 32.06, "Cl": 35.45, "Ar": 39.948, "K": 39.098, "Ca": 40.078,
    "Sc": 44.956, "Ti": 47.867, "V": 50.942, "Cr": 51.996, "Mn": 54.938,
    "Fe": 55.845, "Co": 58.933, "Ni": 58.693, "Cu": 63.546, "Zn": 65.38,
    "Ga": 69.723, "Ge": 72.63, "As": 74.922, "Se": 78.971, "Br": 79.904,
    "Kr": 83.798, "Rb": 85.468, "Sr": 87.62, "Y": 88.906, "Zr": 91.224,
    "Nb": 92.906, "Mo": 95.95, "Tc": 98, "Ru": 101.07, "Rh": 102.91,
    "Pd": 106.42, "Ag": 107.87, "Cd": 112.41, "In": 114.82, "Sn": 118.71,
    "Sb": 121.76, "Te": 127.6, "I": 126.9, "Xe": 131.29, "Cs": 132.91,
    "Ba": 137.33, "La": 138.91, "Ce": 140.12, "Pr": 140.91, "Nd": 144.24,
    "Pm": 145, "Sm": 150.36, "Eu": 151.96, "Gd": 157.25, "Tb": 158.93,
    "Dy": 162.5, "Ho": 164.93, "Er": 167.26, "Tm": 168.93, "Yb": 173.05,
    "Lu": 174.97, "Hf": 178.49, "Ta": 180.95, "W": 183.84, "Re": 186.21,
    "Os": 190.23, "Ir": 192.22, "Pt": 195.08, "Au": 196.97, "Hg": 200.59,
    "Tl": 204.38, "Pb": 207.2, "Bi": 208.98, "Po": 209, "At": 210,
    "Rn": 222, "Fr": 223, "Ra": 226, "Ac": 227, "Th": 232.04, "Pa": 231.04,
    "U": 238.03, "Np": 237, "Pu": 244, "Am": 243, "Cm": 247, "Bk": 247,
    "Cf": 251, "Es": 252, "Fm": 257, "Md": 258, "No": 259, "Lr": 266,
    "Rf": 267, "Db": 270, "Sg": 271, "Bh": 270, "Hs": 269, "Mt": 278,
    "Ds": 281, "Rg": 282, "Cn": 285, "Nh": 286, "Fl": 289, "Mc": 288,
    "Lv": 293, "Ts": 294, "Og": 294,
}


#read in the shapedb score so that it can be corresponded to the ddg scores
shapedb_score = str(sys.argv[1])

#variables to hold the ligand name and conformer number, able to be derived from file name
lig_name = ""
conf_num = ""

#create output files: file to hold score date and file to hold counts of placements for this conformer
score_file = open("score_file.csv", "w")
count_file = open("count_file.csv", "w")

#get location and look for all pdb files that have "ResID" and "delta" in the name

#counter to identify the number of placement files
file_counter = 0

location = os.getcwd()
for r,d,f in os.walk(location):
        for file in f:
                if "ResID" in file and "_delta_" in file:
                        file_counter = file_counter + 1

                        #derive lig name and conf num if not done already
                        if lig_name == "" and conf_num == "":
                                lig_name = file.split("_motif")[0].split("_")[len(file.split("_motif")[0].split("_")) - 2]
                                conf_num = file.split("_motif")[0].split("_")[len(file.split("_motif")[0].split("_")) - 1]
                                print(lig_name, conf_num)


                        #clear variables
                        ddg = ""
                        atr = ""
                        rep = ""
                        source_pdb = ""
                        respos = ""
                        resid = ""
                        atrrep = ""
                        whole = ""
                        motifs = ""
                        sigmotifs = ""
                        realmotifratio = ""
                        mw = 0
                        ligname = ""
                        ligconf = ""

                        #derive the score info and other potentially helpful data (like anchor residue with number)
                        #only pull values if there are present in the file name
                        if "_delta_" in file:
                                ddg = str(file.split("_delta_")[1].split("_")[0].split(".pdb")[0])
                        if "_atr_" in file:
                                atr = str(file.split("_atr_")[1].split("_")[0].split(".pdb")[0])
                        if "_rep_" in file:
                                rep = str(file.split("_rep_")[1].split("_")[0].split(".pdb")[0])
                        if "_atrrep_" in file:
                                atrrep = str(file.split("_atrrep_")[1].split("_")[0].split(".pdb")[0])
                        if "_whole_" in file:
                                whole = str(file.split("_whole_")[1].split("_")[0].split(".pdb")[0])
                        if "_motifs_" in file:
                                motifs = str(file.split("_motifs_")[1].split("_")[0].split(".pdb")[0])
                        if "_sigmotifs_" in file:
                                sigmotifs = str(file.split("_sigmotifs_")[1].split("_")[0].split(".pdb")[0])
                        if "_realmotifratio_" in file:
                                realmotifratio = str(file.split("_realmotifratio_")[1].split("_")[0].split(".pdb")[0])
                        if "_ResPos_" in file:
                                source_pdb = str(file.split("_ResPos_")[0])
                        if "_ResPos_" in file:
                                respos = str(file.split("_ResPos_")[1].split("_")[0])
                        if "_ResID_" in file:        
                                resid = str(file.split("_ResID_")[1].split("_")[0])

                        #derive the molecular weight by reading the file and pull the molecular weight of the ligand
                        readfile = open(r + "/" + file, "r")

                        for line in readfile.readlines():
                                #all lines that start with HETATM have all of the ligand atom data to which we can derive molecular weight
                                if line.startswith("HETATM"):
                                        #atom element is the last in split, make sure to strip off newline
                                        #print(line.split()[len(line.split()) - 1])
                                        atom_element = line.split()[len(line.split()) - 1].strip()

                                        #get the mass from the periodic table dictionary, only count if atom is not hydrogen
                                        if atom_element != "H" and atom_element in periodic_table.keys():
                                                mw = mw + periodic_table[atom_element]

                        readfile.close()

                        #write a line to the score file
                        score_file.write(shapedb_score + "," + lig_name + "," + conf_num + "," + str(mw) + "," + ddg + "," + atr + "," + rep + "," + atrrep + "," + whole + "," + motifs + "," + sigmotifs + "," + realmotifratio + "," + source_pdb + "," + respos + "," + resid + "," + lig_name + "," + conf_num + "\n")

#write count file
count_file.write(shapedb_score + "," + str(file_counter) + "," + lig_name + "," + conf_num)

