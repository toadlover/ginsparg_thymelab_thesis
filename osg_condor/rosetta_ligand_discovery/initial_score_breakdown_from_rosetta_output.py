#this script gets a count of the number of saved placements and get the ddg score of the system
#this file reads the rosetta output, which can collect some extra output from debug verbosity on placements, like their space fill scores
import os,sys

#dictionary that contains atom atomic weights for molecular mass calculation
#To save time, this dictionary was generated by ChatGPT3.5 with the prompt:
#Please write me a python3 dictionary that contains all periodic table element chemical symbols as keys and their atomic weights as values
#Please rewrite the dictionary so that there are 10 elements per line
periodic_table = {
    "H": 1.008, "He": 4.0026, "Li": 6.94, "Be": 9.0122, "B": 10.81,
    "C": 12.011, "N": 14.007, "O": 15.999, "F": 18.998, "Ne": 20.180,
    "Na": 22.990, "Mg": 24.305, "Al": 26.982, "Si": 28.085, "P": 30.974,
    "S": 32.06, "Cl": 35.45, "Ar": 39.948, "K": 39.098, "Ca": 40.078,
    "Sc": 44.956, "Ti": 47.867, "V": 50.942, "Cr": 51.996, "Mn": 54.938,
    "Fe": 55.845, "Co": 58.933, "Ni": 58.693, "Cu": 63.546, "Zn": 65.38,
    "Ga": 69.723, "Ge": 72.63, "As": 74.922, "Se": 78.971, "Br": 79.904,
    "Kr": 83.798, "Rb": 85.468, "Sr": 87.62, "Y": 88.906, "Zr": 91.224,
    "Nb": 92.906, "Mo": 95.95, "Tc": 98, "Ru": 101.07, "Rh": 102.91,
    "Pd": 106.42, "Ag": 107.87, "Cd": 112.41, "In": 114.82, "Sn": 118.71,
    "Sb": 121.76, "Te": 127.6, "I": 126.9, "Xe": 131.29, "Cs": 132.91,
    "Ba": 137.33, "La": 138.91, "Ce": 140.12, "Pr": 140.91, "Nd": 144.24,
    "Pm": 145, "Sm": 150.36, "Eu": 151.96, "Gd": 157.25, "Tb": 158.93,
    "Dy": 162.5, "Ho": 164.93, "Er": 167.26, "Tm": 168.93, "Yb": 173.05,
    "Lu": 174.97, "Hf": 178.49, "Ta": 180.95, "W": 183.84, "Re": 186.21,
    "Os": 190.23, "Ir": 192.22, "Pt": 195.08, "Au": 196.97, "Hg": 200.59,
    "Tl": 204.38, "Pb": 207.2, "Bi": 208.98, "Po": 209, "At": 210,
    "Rn": 222, "Fr": 223, "Ra": 226, "Ac": 227, "Th": 232.04, "Pa": 231.04,
    "U": 238.03, "Np": 237, "Pu": 244, "Am": 243, "Cm": 247, "Bk": 247,
    "Cf": 251, "Es": 252, "Fm": 257, "Md": 258, "No": 259, "Lr": 266,
    "Rf": 267, "Db": 270, "Sg": 271, "Bh": 270, "Hs": 269, "Mt": 278,
    "Ds": 281, "Rg": 282, "Cn": 285, "Nh": 286, "Fl": 289, "Mc": 288,
    "Lv": 293, "Ts": 294, "Og": 294,
}


#read in the shapedb score so that it can be corresponded to the scores
shapedb_score = str(sys.argv[1])

#read in the ligand name, conformer number, source chunk, and source subchunk
lig_name = str(sys.argv[2])
conf_num = str(sys.argv[3])
source_chunk = str(sys.argv[4])
source_subchunk = str(sys.argv[5])

#create output files: file to hold score date and file to hold counts of placements for this conformer
score_file = open("score_file.csv", "w")
count_file = open("count_file.csv", "w")

#get location and look for all pdb files that have "ResID" and "delta" in the name

#counter to identify the number of placement files
file_counter = 0

#read the rosetta_output file
rosetta_output = open("rosetta_output.txt", "r")

#declare all statistic variables
initial_ddg = ""
final_ddg = ""
delta_ddg = ""
initial_atr = ""
final_atr = ""
delta_atr = ""
initial_rep = ""
final_rep = ""
delta_rep = ""
space_fill_sub = ""
space_fill_sub_differential = ""
source_pdb = ""
respos = ""
resid = ""
atrrep = ""
whole = ""
motifs = ""
sigmotifs = ""
realmotifratio = ""
mw = 0

#THIS ONLY WORKS IF THERE IS ONLY 1 PARAMS FILE!
#obtain the molecular weight of the ligand from its param file
location = os.getcwd()
for r,d,f in os.walk(location):
        for file in f:
                if file.endswith(".params"):
                        #read the file
                        param_file = open(r + "/" + file, "r")
                        for line in param_file.readlines():
                                #if line starts with ATOM, it is an atom line and the atom element is in split()[1]
                                #atom has a numerical identifier that we need to remove
                                if line.startswith("ATOM"):
                                        cur_atom = line.split()[1]

                                        cur_atom_no_identifier = ""
                                        #extract the element without the identifier
                                        for char in cur_atom:
                                                if char != "0" and char != "1" and char != "2" and char != "3" and char != "4" and char != "5" and char != "6" and char != "7" and char != "8" and char != "9":
                                                        cur_atom_no_identifier = cur_atom_no_identifier + char
                                        #make sure the cur atom no identifier will match into the library (we only have C,O,N,S,F,Cl,I,Br,H to worry about; hotfix for Cl and Br and make more elegant if I ever have to return to this)
                                        if cur_atom_no_identifier == "CL":
                                                cur_atom_no_identifier = "Cl"
                                        if cur_atom_no_identifier == "BR":
                                                cur_atom_no_identifier = "Br"

                                        #get atom weight and add to mw (ignore if hydrogen)
                                        if cur_atom_no_identifier != "H":
                                                mw = mw + periodic_table[cur_atom_no_identifier]


#initial_ddg + "," + final_ddg + "," + delta_ddg + "," + initial_atr + "," + final_atr + "," + delta_atr + "," + initial_rep + "," + final_rep + "," + delta_rep + "," + space_fill_sub + "," + space_fill_sub_differential + "," +

#write a dummy line for the ligand, in case it just does not get any placements
score_file.write(shapedb_score + "," + lig_name + "," + conf_num + "," + source_chunk + "," +  source_subchunk + "," + str(mw) + "," + initial_ddg + "," + final_ddg + "," + delta_ddg + "," + initial_atr + "," + final_atr + "," + delta_atr + "," + initial_rep + "," + final_rep + "," + delta_rep + "," + space_fill_sub + "," + space_fill_sub_differential + "," + atrrep + "," + whole + "," + motifs + "," + sigmotifs + "," + realmotifratio + "," + source_pdb + "," + respos + "," + resid + "\n")

file_counter = 0

for line in rosetta_output.readlines():
        
        #collect subarea line
        #can be overwritten without a placement if one was not attempted
        if "sub-area," in line:
                space_fill_sub = line.split()[1]

        #collect subarea differential line
        #can be overwritten without a placement if one was not attempted
        if "sub-area differential," in line:
                space_fill_sub_differential = line.split()[1]

        #collect pre dock scores
        if "Pre-move" in line:
                #remove comma at end
                initial_ddg = line.split()[5][:-1]
                initial_atr = line.split()[8][:-1]
                initial_rep = line.split()[11][:-1]

        #collect post dock scores
        if "Post-dock" in line:
                final_ddg = line.split()[5][:-1]
                final_atr = line.split()[8][:-1]
                final_rep = line.split()[11][:-1]

                #derive deltas
                delta_ddg = str(float(final_ddg) - float(initial_ddg))
                delta_atr = str(float(final_atr) - float(initial_atr))
                delta_rep = str(float(final_rep) - float(initial_rep))

        #we are at the point where we make a printed pdb:
        #collect the data from that line and print the placement info
        #then reset the line
        if "Making pdb file for" in line:

                file_counter = file_counter + 1

                #pull the filename
                file = line.split()[5]

                #derive the score info and other potentially helpful data (like anchor residue with number)
                #only pull values if there are present in the file name
                if "_atrrep_" in file:
                        atrrep = str(file.split("_atrrep_")[1].split("_")[0].split(".pdb")[0])
                if "_whole_" in file:
                        whole = str(file.split("_whole_")[1].split("_")[0].split(".pdb")[0])
                if "_motifs_" in file:
                        motifs = str(file.split("_motifs_")[1].split("_")[0].split(".pdb")[0])
                if "_sigmotifs_" in file:
                        sigmotifs = str(file.split("_sigmotifs_")[1].split("_")[0].split(".pdb")[0])
                if "_realmotifratio_" in file:
                        realmotifratio = str(file.split("_realmotifratio_")[1].split("_")[0].split(".pdb")[0])
                if "_ResPos_" in file:
                        source_pdb = str(file.split("_ResPos_")[0])
                if "_ResPos_" in file:
                        respos = str(file.split("_ResPos_")[1].split("_")[0])
                if "_ResID_" in file:        
                        resid = str(file.split("_ResID_")[1].split("_")[0])

                #write a line to the score file
                score_file.write(shapedb_score + "," + lig_name + "," + conf_num + "," + source_chunk + "," +  source_subchunk + "," + str(mw) + "," + initial_ddg + "," + final_ddg + "," + delta_ddg + "," + initial_atr + "," + final_atr + "," + delta_atr + "," + initial_rep + "," + final_rep + "," + delta_rep + "," + space_fill_sub + "," + space_fill_sub_differential + "," + atrrep + "," + whole + "," + motifs + "," + sigmotifs + "," + realmotifratio + "," + source_pdb + "," + respos + "," + resid + "\n")

                #reset variables
                initial_ddg = ""
                final_ddg = ""
                delta_ddg = ""
                initial_atr = ""
                final_atr = ""
                delta_atr = ""
                initial_rep = ""
                final_rep = ""
                delta_rep = ""
                space_fill_sub = ""
                space_fill_sub_differential = ""
                source_pdb = ""
                respos = ""
                resid = ""
                atrrep = ""
                whole = ""
                motifs = ""
                sigmotifs = ""
                realmotifratio = ""





#write count file
count_file.write(shapedb_score + "," + str(file_counter) + "," + lig_name + "," + conf_num)

